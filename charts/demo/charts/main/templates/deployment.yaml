apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "fullname" . }}
  labels:
    {{- include "labels" . | nindent 4 }}
spec:
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit | default 5 }}
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- if or .Values.application.env .Values.podAnnotations }}
      annotations:
      {{- if .Values.application.env }}
        checksum/configmap: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
      {{- end }}
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- end }}
      labels:
        {{- include "selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- with .Values.initContainers }}
      initContainers:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if or .Values.lifecycle }}
          lifecycle:
            {{- toYaml .Values.lifecycle | nindent 12 }}
          {{- end }}
          {{- if or .Values.application.secretName .Values.application.env }}
          envFrom:
          {{- if .Values.application.secretName }}
          - secretRef:
              name: {{ .Values.application.secretName }}
          {{- end }}
          {{- if .Values.application.env }}
          - configMapRef:
              name: {{ include "fullname" . }}
          {{- end }}
          {{- end }}
          ports:
          - name: "{{ .Values.service.name }}"
            containerPort: {{ .Values.service.internalPort }}
          {{- if .Values.startupProbe }}
          startupProbe:
{{- if eq .Values.startupProbe.probeType "httpGet" }}
            httpGet:
              path: {{ .Values.startupProbe.path }}
              scheme: {{ .Values.startupProbe.scheme }}
              port: {{ .Values.service.internalPort }}
{{- else if eq .Values.startupProbe.probeType "tcpSocket" }}
            tcpSocket:
              port: {{ .Values.service.internalPort }}
{{- else if eq .Values.startupProbe.probeType "exec" }}
            exec:
              command:
{{ toYaml .Values.startupProbe.command | indent 14 }}
{{- end }}
            initialDelaySeconds: {{ .Values.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.startupProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.startupProbe.timeoutSeconds }}
            successThreshold: {{ .Values.startupProbe.successThreshold }}
            failureThreshold: {{ .Values.startupProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.livenessProbe }}
          livenessProbe:
{{- if eq .Values.livenessProbe.probeType "httpGet" }}
            httpGet:
              path: {{ .Values.livenessProbe.path }}
              scheme: {{ .Values.livenessProbe.scheme }}
              port: {{ .Values.service.internalPort }}
{{- else if eq .Values.livenessProbe.probeType "tcpSocket" }}
            tcpSocket:
              port: {{ .Values.service.internalPort }}
{{- else if eq .Values.livenessProbe.probeType "exec" }}
            exec:
              command:
{{ toYaml .Values.livenessProbe.command | indent 14 }}
{{- end }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.livenessProbe }}
          readinessProbe:
{{- if eq .Values.readinessProbe.probeType "httpGet" }}
            httpGet:
              path: {{ .Values.readinessProbe.path }}
              scheme: {{ .Values.readinessProbe.scheme }}
              port: {{ .Values.service.internalPort }}
{{- else if eq .Values.readinessProbe.probeType "tcpSocket" }}
            tcpSocket:
              port: {{ .Values.service.internalPort }}
{{- else if eq .Values.readinessProbe.probeType "exec" }}
            exec:
              command:
{{ toYaml .Values.readinessProbe.command | indent 14 }}
{{- end }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
